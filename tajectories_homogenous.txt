
%% simulating trajectories %%

% parameters
m = 1.67 * 10^(-27); 
c = 3. * 10^8; e = 1.6 * 10^(-19);

B_z = 0.2;
% A_varphi = B_z * z / 2.; 

% Boundary conditions
tspan = [0 10.];
y0 = [0.5 0 0 0 0.5 0 0.5];

% solving the systems of DEs
[t, y] = ode45(@(t, y)odefn(t, y, m, c, e, B_z), tspan, y0);

% plotting the solutions
plot(t, mod(y(:, 2), 2*pi), '-');
%plot(t, y(5), '-');
%plot(t, y(2), '*');


% Writing the RHS of differential equations 
    % y = [R, varphi, Z, v_R, v_varphi, v_Z, p_varphi]
function dydt = odefn(t, y, m, c, e, B_z)

    dydt = zeros(6, 1);
    dydt(1) = y(4);
    dydt(2) = y(5);
    dydt(3) = y(6);
    dydt(4) = e* y(1)* B_z *y(5)/(m*c) + ( ...
        m^(-2)*( y(7)/y(1) - e*B_z/(2*c) )*y(7)/( (y(1))^2 ));
    dydt(5) = -e*B_z* y(4) / ( m*c*y(1) );
    dydt(6) = m^(-2)*( y(7)/y(1) - e*B_z/(2*c) )*e*B_z / (2*c);
    dydt(7) = 0;
end